  event void {{=it.name}}SplitControl.startDone(error_t err) {
    if (err == SUCCESS) {
      {{? it.number_of_next > 1}}atomic {
        if (++{{=it.name_}}_init_counter == {{=it.number_of_next}}) {
          call {{=it.name}}Timer.startPeriodic({{=it.name_ + '_timer_rate'}});
        }
      }{{??}}call {{=it.name}}Timer.startPeriodic({{=it.name_ + '_timer_rate'}});{{?}}{{~it.init_calls :v}}
      {{=v.split('\n').join('\n      ')}}{{~}}
    } else {
      call {{=it.name}}SplitControl.start();
    }
  }
  event void {{=it.name}}SplitControl.stopDone(error_t err) {
  }
  event void {{=it.name}}Timer.fired() {{{? it.interfaces.indexOf('AccelRead') !== -1 }}
    call {{=it.name}}AccelRead.read();{{?}}{{? it.interfaces.indexOf('GyroRead') !== -1 }}
    call {{=it.name}}GyroRead.read();{{?}}
  }
  {{? it.interfaces.indexOf('AccelRead') !== -1 }}
  event void {{=it.name}}AccelRead.readDone(error_t err, Accel_t val) {
    {{=it.name_}}_accel_read_data = val;{{~it.event_calls.AccelRead :v}}
    {{=v}}{{~}}
  }{{?}}
  {{? it.interfaces.indexOf('GyroRead') !== -1 }}
  event void {{=it.name}}GyroRead.readDone(error_t err, Gyro_t val) {
    {{=it.name_}}_gyro_read_data = val;{{~it.event_calls.GyroRead :v}}
    {{=v}}{{~}}
  }{{?}}